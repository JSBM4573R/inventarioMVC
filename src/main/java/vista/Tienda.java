package vista;

import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import modelo.BasedeDatosProducto;
import modelo.Producto;

/**
 * Esta clase crea la interfaz gráfica de la aplicación
 * @author desaextremo
 */
public class Tienda extends javax.swing.JFrame {

    /**
     * Referencia a objeto BasedeDatosProducto requerida para utilizar su
     * métodos y administrar la colección o HashMap
     */
    private BasedeDatosProducto baseDatos;
    /**
     * Modelo de datos del JTable o tabla de datos. Requerido para actualizar
     * los datos de la tabla en la interfaz gráfica
     */
    private DefaultTableModel modeloTabla;
    /**
     * Referencia a objeto Producto. Requerido para agregar, borrar y eliminar
     * productos en la colección o HashMap
     */
    private Producto producto;

    /**
     * Constructor de la clase: Instancia variables necesarias para administrar
     * la colección, pintar datos en la tabla, armar los datos y presentarlos en
     * la tabla y hacer visible la interfaz gráfica
     */
    public Tienda() {
        modeloTabla = new DefaultTableModel();
        baseDatos = new BasedeDatosProducto();
        initComponents();
        armarModelo();
        setVisible(true);
    }

    /**
     * Configura el modelo de datos de la tabla de datos: Un componente JTable
     * trabaja con un modelo de datos, todas las operaciones que se lleven a
     * cabo sobre el modelo de datos afectara al contenido de la tabla(JTable:
     * tablaProductos)
     *
     * Asigna el modelo de datos a la tabla, agrega las columnas(titulos),
     * configura el encabezado de la tabla asignando fuente, tipo de fuente, y
     * alineación central para cada columna
     */
    public void armarModelo() {
        //asignar modelo de datos
        this.tablaProductos.setModel(modeloTabla);

        //define columnas de la tabla (encabezado)
        modeloTabla.addColumn("Codigo");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Precio");
        modeloTabla.addColumn("Inventario");

        //configura encabezado de la tabla, fuente, formato y alineación
        JTableHeader encabezado = this.tablaProductos.getTableHeader();
        encabezado.setFont(new Font("Tahome", Font.BOLD, 16));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        ((DefaultTableCellRenderer) encabezado.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        //alinea al centro el contenido de la tabla
        this.tablaProductos.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        this.tablaProductos.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        this.tablaProductos.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        this.tablaProductos.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);

        //Cargar los datos de la tabla 
        if (!baseDatos.getListaProductos().isEmpty());
        for (Producto producto : baseDatos.getListaProductos().values()) {
            modeloTabla.addRow(producto.registroProducto());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        botonAgregarProducto = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cajaNombre = new javax.swing.JTextField();
        cajaPrecio = new javax.swing.JTextField();
        cajaInventario = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        botonActualizar = new javax.swing.JButton();
        botonBorrar = new javax.swing.JButton();
        botonInformes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inventario de Productos");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Bienvenido a la APP de Inventario");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Agregar Nuevo Producto"));

        botonAgregarProducto.setText("Agregar Producto");
        botonAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarProductoActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre:");

        jLabel3.setText("Precio:");

        jLabel4.setText("Inventario:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cajaNombre)
                    .addComponent(cajaPrecio)
                    .addComponent(cajaInventario))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(284, 284, 284)
                .addComponent(botonAgregarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(285, 285, 285))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cajaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cajaPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cajaInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(botonAgregarProducto)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Listado de Productos"));

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaProductos);

        botonActualizar.setText("Actualizar Producto");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        botonBorrar.setText("Borrar Producto");
        botonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarActionPerformed(evt);
            }
        });

        botonInformes.setText("Informes");
        botonInformes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInformesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(botonActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonInformes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(163, 163, 163))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonActualizar)
                    .addComponent(botonBorrar)
                    .addComponent(botonInformes))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Agregar un producto: Obtiene la información ingresada en los cuadros de
     * texto, instancia a un producto y envia como parametro la información
     * registrada en las cajas de datos.
     *
     * Agregar el producto a la colección, invocando el método agregar de la
     * clase BasedeDatosProducto
     *
     * @param evt objeto que almacena información sobe el evento
     */
    private void botonAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarProductoActionPerformed
        String nombre;
        double precio;
        int inventario;

        try {
            nombre = cajaNombre.getText().trim();
            precio = Double.parseDouble(cajaPrecio.getText());
            inventario = Integer.parseInt(cajaInventario.getText());

            producto = new Producto(nombre, precio, inventario);
            baseDatos.agregar(producto);
            //hace visible el nuevo registro en la tabla de datos
            modeloTabla.addRow(producto.registroProducto());

            //limpio el contenido de las cajas de texto
            cajaNombre.setText("");
            cajaPrecio.setText("");
            cajaInventario.setText("");
            JOptionPane.showMessageDialog(this, "Producto Agregado correctamentent\n" + producto, "Agregar Producto", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor verifique los datos del producto", "Agregar Producto", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonAgregarProductoActionPerformed
    
    /**
     * Actualizar producto: Obtiene el código del producto seleccionado en la tabla de datos, 
     *                      obtiene el producto de la colección lo y lo envia al cuadro de dialogo,
     *                      en el cuadro de dialogo el usuario modificar los datos, 
     *                      cierra el dialogo y los datos del producto
     * se actualizan en la colección mediante el método actualizar
     * @param evt 
     */
    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        int filaSeleccionada = tablaProductos.getSelectedRow();
        
        if (filaSeleccionada > 0) {

            int codigo = Integer.parseInt(modeloTabla.getValueAt(filaSeleccionada, 0).toString());
            producto = baseDatos.getListaProductos().get(codigo);
            //aqui se abre el cuadro de dialogo y se le envia el producto para que sea modificado
            DialogoProducto dialogo = new DialogoProducto(this, producto, true);
            
            //al cerrar el cuadro de dialogo el producto esta actualizado (los objetos se pasan por referencia)
            baseDatos.actualizar(producto);
            
            //actualiza el contenido de la tabla
            modeloTabla.setValueAt(producto.getNombre(), filaSeleccionada, 1);
            modeloTabla.setValueAt(producto.getPrecio(), filaSeleccionada, 2);
            modeloTabla.setValueAt(producto.getInventario(), filaSeleccionada, 3);

            JOptionPane.showMessageDialog(this, producto, "Producto actualizado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar el producto que desea Actualizar", "Actualizar Producto", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonActualizarActionPerformed
    
    /**
     * Borrar Producto: Obtiene el código del producto seleccionado en la tabla de datos, 
     * obtiene el producto de la colección
     * lo elimina de la colección mediante el método borrar, y actualiza la información de la tabla de datos
     * @param evt objeto que almacena información sobe el evento
     */
    private void botonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarActionPerformed
       int filaSeleccionada = tablaProductos.getSelectedRow();

        if (filaSeleccionada > 0) {
            //obtiene el codigo a partir del dato en la tabla, sua la fila y columna 0 (codigo)
            int codigo = Integer.parseInt(modeloTabla.getValueAt(filaSeleccionada, 0).toString());
            
            //obtiene el producto a oartir del codigo
            producto = baseDatos.getListaProductos().get(codigo);
            //borra en la coleccion
            baseDatos.borrar(producto);
            //actualiza la tabla de datos
            modeloTabla.removeRow(filaSeleccionada);
            JOptionPane.showMessageDialog(this, producto, "Producto eliminado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar el producto que desea Borrar", "Borrar Producto", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_botonBorrarActionPerformed
    
    /**
     * Invoca al método de la clase BasedeDatosProducto para generar el informe
     * @param evt objeto que almacena información sobe el evento
     */
    private void botonInformesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInformesActionPerformed
        JOptionPane.showMessageDialog(this, baseDatos.generarInforme(), "Generar Informe", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botonInformesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonAgregarProducto;
    private javax.swing.JButton botonBorrar;
    private javax.swing.JButton botonInformes;
    private javax.swing.JTextField cajaInventario;
    private javax.swing.JTextField cajaNombre;
    private javax.swing.JTextField cajaPrecio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaProductos;
    // End of variables declaration//GEN-END:variables
}
